// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yi-jiayu/bus-eta-bot/v4 (interfaces: UserRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetUserFavourites mocks base method
func (m *MockUserRepository) GetUserFavourites(arg0 context.Context, arg1 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFavourites", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFavourites indicates an expected call of GetUserFavourites
func (mr *MockUserRepositoryMockRecorder) GetUserFavourites(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFavourites", reflect.TypeOf((*MockUserRepository)(nil).GetUserFavourites), arg0, arg1)
}

// SetUserFavourites mocks base method
func (m *MockUserRepository) SetUserFavourites(arg0 context.Context, arg1 int, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserFavourites", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserFavourites indicates an expected call of SetUserFavourites
func (mr *MockUserRepositoryMockRecorder) SetUserFavourites(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserFavourites", reflect.TypeOf((*MockUserRepository)(nil).SetUserFavourites), arg0, arg1, arg2)
}

// UpdateUserLastSeenTime mocks base method
func (m *MockUserRepository) UpdateUserLastSeenTime(arg0 context.Context, arg1 int, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLastSeenTime", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLastSeenTime indicates an expected call of UpdateUserLastSeenTime
func (mr *MockUserRepositoryMockRecorder) UpdateUserLastSeenTime(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLastSeenTime", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserLastSeenTime), arg0, arg1, arg2)
}
